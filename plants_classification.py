# -*- coding: utf-8 -*-
"""Plants Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KaWraeLOH-cF-WRmerHxtL4jU_mhvHbU

# Plants Classification

## Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout ,GlobalAveragePooling2D, Activation, Rescaling
from keras.models import Sequential, Model
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix,classification_report
from tensorflow.keras.applications import InceptionResNetV2, MobileNetV2
from tensorflow.keras import regularizers
import os, shutil
import warnings
warnings.filterwarnings('ignore')

"""## Download Dataset"""

!pip install -q opendatasets

import opendatasets as od

# insert your username and kaggle api key from kaggle.json file
od.download('https://www.kaggle.com/datasets/marquis03/plants-classification')

pip install split-folders

output_path = '/content/dataset'
data_path = '/content/plants-classification/train'

# Folder yang dipilih
selected_folders = ['aloevera', 'banana', 'pineapple','cassava', 'coconut', 'cucumber','papaya', 'corn', 'eggplant', 'watermelon', 'shallot', 'guava', 'mango','melon', 'orange']

for folder in selected_folders:
    # Path lengkap menuju folder saat ini di dataset asli
    source_folder = os.path.join(data_path, folder)

    # Path lengkap menuju folder di folder output
    destination_folder = os.path.join(output_path, folder)

    # Mengkopi folder dari dataset asli ke folder output
    shutil.copytree(source_folder, destination_folder)

print("Proses selesai.")

import splitfolders
splitfolders.ratio('/content/dataset', output="plant_pict", seed=1337, ratio=(0.8, 0.2))

train_data = "/content/plant_pict/train"
validation_data = "/content/plant_pict/val"

"""## Augmentasi Gambar"""

train_gen = ImageDataGenerator( featurewise_center=False,
                                samplewise_center=False,
                                featurewise_std_normalization=False,
                                samplewise_std_normalization=False,
                                zca_whitening=False,
                                rotation_range=10,
                                zoom_range = 0.1,
                                width_shift_range=0.2,
                                height_shift_range=0.2,
                                horizontal_flip=True,
                                vertical_flip=False,
                              )

train_image_generator = train_gen.flow_from_directory(
                                            train_data,
                                            target_size=(150, 150),
                                            batch_size=64,
                                            class_mode='categorical')


val_gen = ImageDataGenerator(   horizontal_flip=True,
                                vertical_flip=False,)

val_image_generator = val_gen.flow_from_directory(
                                            validation_data,
                                            target_size=(150, 150),
                                            batch_size=64,
                                            class_mode='categorical')

base_model = InceptionResNetV2(
    weights="imagenet",  # Load weights pre-trained on ImageNet.
    input_shape=(150, 150, 3),
    include_top=False,
)

# Freeze the base_model
base_model.trainable = True

"""## CNN Model"""

model = tf.keras.models.Sequential([
    Rescaling(scale=1 / 127.5, offset=-1),
    base_model,
    Conv2D(128, (3, 3), activation='relu', padding='same', input_shape=(None, None, 3)),
    BatchNormalization(),
    Activation('relu'),
    MaxPooling2D(pool_size=(2, 2)),
    GlobalAveragePooling2D(),
    Flatten(),
    Dense(64, kernel_regularizer=regularizers.l2(1e-4)),
    BatchNormalization(),
    Activation('relu'),
    Dropout(0.2),
    Dense(15, activation='softmax')
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics='accuracy')

"""## Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("accuracy > 92% skala data")
      self.model.stop_training = True
callbacks = myCallback()

early_stopping = keras.callbacks.EarlyStopping(patience=3,monitor='val_loss',restore_best_weights=True)

"""## Model Train"""

history = model.fit(train_image_generator,
                 steps_per_epoch=30,
                 epochs=50,
                 verbose=1,
                 validation_data=val_image_generator,
                 callbacks=[callbacks],
                 workers=4,
                 batch_size=32
                )

"""## Evaluasi Model"""

model.evaluate(train_image_generator)

model.evaluate(val_image_generator)

pd.DataFrame(history.history).plot()

"""## Menyimpan Model"""

import pathlib

# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

# Convert SavedModel menjadi food.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('plants.tflite')
tflite_model_file.write_bytes(tflite_model)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!zip -r plants_model.zip saved_model/

from google.colab import files
files.download('plants_model.zip')